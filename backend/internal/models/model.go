package models

import (
	"net/url"
)

// DBError represents a error generated by DB layer
type DBError struct {
	Code int   // optional HTTP Status Code
	Err  error // error
}

// Error returns a string representation of DBErr
func (e DBError) Error() string {
	return e.Err.Error()
}

// Status returns the HTTP status code associated with the error, else returns 0
func (e DBError) Status() int {
	return e.Code
}

type Model interface {

	// users
	CreateUser(tenantID, requestorID string, in *ChatterBoxUser) (out *ChatterBoxUser, err error)
	ReadUser(tenantID, requestorID string, query url.Values) (out []*ChatterBoxUser, err error)
	ReadUsersLite(tenantID, requestorID string) (out []*ChatterBoxUserLite, err error)
	ReadUserByID(tenantID, requestorID, userID string) (out *ChatterBoxUser, err error)
	ReadUserByUsername(tenantID, requestorID, username string) (out *ChatterBoxUser, err error)
	ReadUserAttributes(userID string) (ua *UserAttrib, err error)
	GetUserEmailByID(userID string) (userEmail string, err error)
	UpdateUser(tenantID, requestorID string, in *ChatterBoxUser) (out *ChatterBoxUser, err error)
	DeleteUser(tenantID, requestorID, userID string) (err error)
	ReadUserTenants(userID string) (out []*BippTenant, err error)
	ReadUserGroups(tenantID, requestorID, userID string) (out []*BippGroup, err error)
	GetUserAuthorizations(tenantID, requestorID, userID string) (out *AuthZ, err error)
	UpdateUserAuthorizations(tenantID, requestorID, userID string, in *AuthZ) (err error)
	IsUserInOrg(userID, tenantID string) (exists bool)
	IsUserByIDExists(userID string) (exists bool)
	IsUserInOrgByEmail(userEmail, tenantID string) (exists bool)
	AddUserToTenantByEmail(tenantID, userEmail string, permissions []string) (err error)
	IsUserByEmailExists(email string) (exists bool)
	IsUserActive(userID string) bool
	GetUsersFromString(tenantID, requestorID, in string) (out []*ChatterBoxUser)
	GetUsersFromStringByEmail(tenantID, in string) (out []*ChatterBoxUser)
	RemoveUserFromTenant(tenantID, requestorID, userID string) (err error)
	TransferOwnershipFromUser(tenantID, requestorID, srcUserID, tgtUserID string) (err error)
	ReadUserLastLogin(tenantID, requestorID, userID string) (out *LastLoginInfo, err error)
	UpdateUserLastLogin(tenantID, requestorID string, in *LastLoginInfo) (out *LastLoginInfo, err error)
	GetLastLoggedTenant(userID string) (tenantID string, err error)
	GetUserCountForTenant(tenantID string) (count int64)
	GetUserCreatedTenant(userID string) (tenant *BippTenant, err error)
}
